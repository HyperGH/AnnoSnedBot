import datetime
import logging
import os
import platform
from pathlib import Path

import discord


async def backup_database(dsn: str) -> discord.File:
    """Attempts to back up the database via pg_dump into the db_backup directory"""
    if platform.system() == "Linux":
        logging.info("Performing daily database backup...")
        username = dsn.split(":")[1][2:]
        password = dsn.split(":")[2].split("@")[0]
        hostname = dsn.split(":")[2].split("@")[1]
        port = dsn.split(":")[3].split("/")[0]
        db_name = dsn.split(":")[3].split("/")[1]
        filepath = os.path.dirname(os.path.realpath(__file__))

        home = Path.home()
        if not os.path.isfile(os.path.join(home, ".pgpass")):
            pgpass_contents = f"#Automatically generated by Sned-Bot\n{hostname}:{port}:{db_name}:{username}:{password}"
            file = open(os.path.join(home, ".pgpass"), "w")
            file.write(pgpass_contents)
            file.close()
            os.system("chmod 600 ~/.pgpass")  # Ensure file permissions are set properly
        else:
            logging.info(".pgpass file assumed to exist.")
        if not os.path.isdir(os.path.join(filepath, "db_backup")):
            os.mkdir(os.path.join(filepath, "db_backup"))
        os.chdir(os.path.join(filepath, "db_backup"))
        now = datetime.datetime.now(datetime.timezone.utc)
        filename = f"{now.year}-{now.month}-{now.day}_{now.hour}_{now.minute}_{now.second}.sql"
        backup_path = os.path.join(filepath, "db_backup", filename)
        os.system(f"pg_dump -c -U {username} -d {db_name} -h {hostname} -p {port} -w > {backup_path}")
        file_to_upload = discord.File(backup_path)
        logging.info("Database backup complete!")
        return file_to_upload
    else:
        logging.warning(
            f"Skipping database backup task as it is not supported on {platform.system()}."
        )
